# This is a R script to plot ELAI output for each replicates, one grpah per LG and per population. 
# For example if 42 LG * 2 population = this will create 84 plots


require(dplyr)
		

yourplots <- function (pop, nind, LG){
	
		png(paste0("08_plot/",pop,"_plot_LG_",LG,".png"), width = 1800, height = 1200)
		par(mfrow=c(6,4))	#change settings in function of the number of individuals
		par(mar=c(1.5,1.5,1.5,1.5)) #adjust if needeed
	
		PATH=("06_outputELAI/")
		
			snpinfo_list = list.files(path=PATH, pattern=paste0(pop,".sf",LG,".replicate01.numgen*[0-9].snpinfo.txt"))
			snpinfo= lapply(paste0(PATH,snpinfo_list), function(x) read.table( x, header=T))
			snpinfo<-snpinfo[[1]]	
			snp <-as.data.frame(snpinfo[,2])
					  
			file_list= list.files(path=PATH, pattern=paste0(pop,".sf",LG,".replicate*[0-9]*.numgen*[0-9]*.ps21.txt"))
			list.df= lapply(paste0(PATH,file_list), function(x) read.table( x))
			
			nind=nind
			
			for(k in c(1:nind)){ 
			
			melty_list = lapply(list.df, function(x) x[k,]) %>%
						 lapply(function(x) x[,c(TRUE, FALSE)]) %>%
						 lapply(function(x) as.matrix(t(x))) 
			
			df<- do.call("cbind", melty_list)
						  
			df1<-cbind(snp, df)
			df2 <- data.frame(df1[,-1], row.names=df1[,1])
			
			matplot(df2, type = "l", ylim = c(0,2), col = "grey47") #plot replicates
			
      #file with the mediane of each replicates per LGs
			panel_list = list.files(path="07_Medianes/", pattern=paste0(pop,"_mg*[0-9].sf",LG,"_MEDiANreplicates.ps21.txt"))
			
			panel= lapply(paste0("07_Medianes/",panel_list), function(x) read.table( x))
			panel<-panel[[1]]
			
      #To plot the domestic ancestry
      
			pop1<-panel[,c(TRUE, FALSE)]
			p1<-pop1[k, ]
			tp1=as.matrix(t(p1))
		
			lines(tp1[,1], col="red", lwd=2)			
		  }
			
dev.off()
}

data<-read.table("02_info/populations_and_number_of_individuals.csv", sep=",")


    for (i in c(1:nrow(data))){
      for (j in c(1:42)){
       arg1=data[i,1] %>% as.character(.)
       arg2=data[i,2]%>% as.character(.)
       
       yourplots(arg1, arg2, as.character(j))
      }
    }  
  
